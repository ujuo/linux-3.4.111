/*
 * Omnivision OV2643 CMOS Image Sensor driver
 *
 * Copyright (C) 2017 I4VINE Inc.
 *
 * All right reserved by JuYoung Ryu <jyryu@stcube.com>
 *
 * This program is free software; you may redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef OV2643_H
#define OV2643_H

#define	UXGA_WIDTH		1600
#define UXGA_HEIGHT		1200
#define SVGA_WIDTH		800
#define	SVGA_HEIGHT		600
#define	HD720P_WIDTH	1280
#define HD720P_HEIGHT	720

#define OV2643_PSVD		0x00	/* Reserved */
#define OV2643_AGC		0x01	/* Gain value */
#define OV2643_AEC		0x02	/* Exposure value[15:8] */
#define OV2643_AEC2		0x03	/* Exposure value[7:0] */
#define OV2643_LAEC		0x04	/* Less than one line exposure */
#define OV2643_RED		0x05	/* AWB gain red[11:4]  */
#define OV2643_GREEN	0x06 	/* AWB gain green[11:4] */
#define OV2643_BLUE		0x07	/* AWB gain blue[11:4] */
#define OV2643_RG		0x08	/* AWB gain red[3:0],AWB gain green[3:0] */
#define OV2643_BLUE2	0x09	/* Reserved[7:4],AWB gain blue[3:0] */
#define OV2643_PIDH		0x0A	/* Product ID MSB */
#define OV2643_PIDL		0x0B	/* Product ID LSB */
#define OV2643_CTRL1	0x0C	/* DVP Set1 */
#define 	CTRL1_IMGSIZE		0x80	/* 	0: 1280*720 
										1: 1600*900 (Only crop mode(register 0x12[6]=1)) */
#define		CTRL1_SUBOPT		0x40	/* 	sub_opt */
#define 	CTRL1_CCIR656		0x20	/* 	0: Disable 1: Enable */
#define 	CTRL1_GDVP_CLK		0x10	/* 	0: DVP Clkis free running
										1: DVP Clk is gated during blanking output */
#define 	CTRL1_DSPRAW_SEL	0x0C	/* 	00: Select raw data after DPC
										01: Select raw data after LENC
										10: Select raw data after AWB
										11: Select raw data after gamma */
#define 	CTRL1_YAVG_SEL		0x03	/* 	00: Select frame average of sensor raw data
										01: Select frame average of LENC output
										10: Select frame average of AWB output
										11: Select frame average of gamma output */
#define OV2643_CTRL2	0x0D	/* DVP Set2 */
#define		CTRL2_OUTPUT_SEL	0x60	/*  00: YUYV/GBGR
                                            01: UYVY/BGRG
                                            10: YVYU/GRGB
                                            11: VYUY/RGBG*/
#define		CTRL2_SENSORRAW		0x10	/* 	0: Select ISP raw data when output is raw
											1: Select sensor raw data when output is raw */
#define		CTRL2_RGB_SET		0x0C	/* 	00: RGB555
											01: RGB565
											1x: GBR422 */
#define OV2643_PLL1		0x0E	
#define 	PLL1_BIT_DIV 		0xC0	/* 	00: 1, 01: 1, 10: 4, 11: 5 */
#define 	PLL1_PLL_DIV			0x3F	/*	plldiv */
#define OV2643_PLL2		0x0F	
#define		PLL2_SYS_DIV			0x0C	/* 	00: sysdiv=1, 01: sysdiv=2, 10: sysdiv=8, 11: sysdiv=16 */
#define		PLL2_FREQ_DIV		0x03	/*  00: freqdiv=1, 01: freqdiv=1.5, 10: freqdiv=2, 11: freqdiv=3 */
#define OV2643_PLL3		0x10
#define 	PLL3_POWER_DOWN		0x80	/* 	PLL Power down */
#define		PLL3_BYPASS			0x40	/*  0: Select output clock, 1: Bypass PLL */
#define		PLL3_CHARGE_CTRL	0x38	/* 	PLL charge pump control */
#define		PLL3_INDIV			0x08	/* 	000: 1, 001: 1.5, 010: 2, 011: 3, 100: 2, 101: 3, 110: 4, 111: 6 */
#define OV2643_CLK		0x11	
#define		CLK_DPLLEN			0x80	/*	0: pllclk, 1: pllclk*2  */	
#define		CLK_SLVPCK			0x40	/*  0: DVP clock is generated by internal divider
                                            1: DVP clock is from PLL clock */
#define		CLK_DIV				0x3F	/*	DVP clock = input / (2*div +1) */
#define OV2643_SYS		0x12	
#define		SYS_SOFT_RESET		0x80	/*	0: Normal, 1: Soft reset */
#define		SYS_CROP			0x40	/* 	0: Normal, 1: Crop mode	*/
#define		SYS_MIRROR			0x20	
#define		SYS_FLIP			0x10
#define		SYS_FORMAT_SEL		0x0C	/* 	00: Raw data, 01: RGB, 1x: YUV */
#define		SYS_SIZE_SEL		0x03	/* 	00: Full(1600*1200), 01: 1:2 subsample(800*600)
											10: 1:4 subsample(400*300), 11: 1:8 subsample(200*150) */
#define OV2643_AUTO1	0x13	
#define		AUTO1_FAST_EN		0x80	/*	0: Slow AEC/AGC, 1: Fast AEC/AGC */
#define		AUTO1_BSTP			0x40	/* 	0: Limit AEC max step to blanking line number 
											1: AEC step no limit */
#define		AUTO1_BANDF_EN		0x20	/* 	0: Disable banding filter
											1: Enable banding filter */
#define		AUTO1_AUTOBD		0x10 	/* 	0: AEC always use banding step 
											1: Banding ON/OFF auto detect */
#define		AUTO1_L1AEC			0x08	/* 	0: Disable less than one line exposure
											1: Enable less than one line exposure */
#define		AUTO1_AWB_GAIN		0x04	/* 	0: Use manual AWB gain from registers 0x05~0x09
											1: AWB gain auto calculated */
#define		AUTO1_AEC_EN		0x02	/* 	0: Disable auto exposure control
											1: Enable auto exposure control */
#define		AUTO1_AGC_EN		0x01	/* 	0: Disable auto gain control 
											1: Enable auto exposure control */
#define OV2643_AUTO2	0x14	
#define		AUTO2_BAND			0x80	/* 	0: 60Hz banding, 1: 50Hz banding */
#define		AUTO2_BDSW_RST		0x20	/*	0: Do not reset AEC/AGC when switching between 50Hz and 60Hz */
										/* 	1: Reset AEC/AGC when switching between 50Hz and 60Hz */
#define OV2643_AUTO3	0x15	
#define OV2643_AUTO4	0x16
#define OV2643_AUTO5	0x17	
#define OV2643_WPT		0x18	/* AEC stable range high limit */
#define OV2643_BPT		0x19	/* AEC stable range low limit */
#define OV2643_VPT		0x1A	/* AEC 2x high/low limit */
#define OV2643_YAVG		0x1B	/* Frame average value */
#define OV2643_VSOPT	0x1C	/* VSYNC opt */
#define OV2643_AECGM	0x1D	/* Limation of maximum banding exposure value */
#define OV2643_BDST		0x1E	/* Banding step MSB */
#define OV2643_BDST2	0x1F	/* Banding step LSB */
#define OV2643_HS		0x20	/* Horizontal window start MSB */
#define OV2643_HS2		0x21	/* Horizontal window start LSB */
#define OV2643_VS		0x22	/* Vertical window start MSB */
#define OV2643_VS2		0x23	/* Vertical window start LSB */
#define OV2643_HW		0x24	/* Horizontal window width bit[11:4] */
#define OV2643_HW2		0x25	
#define 	HW2_HWIDTH			0xF0	/* Horizontal window width bit[3:0] */
#define		HW2_BOUNDARY_PIXEL	0x0F	/* Number of boundary pixels in horizontal window for DSP */
#define OV2643_VH		0x26	/* Vertical window height[11:4] */
#define OV2643_VH2		0x27	
#define		VH2_VHEIGHT			0xF0	/* Vertical window height[3:0] */
#define		VH2_BOUNDARY_PIXEL	0x0F	/* Number of boundary pixels in horizontal window for DSP */
#define OV2643_HVOFF	0x28	
#define		H_OFFSET			0xF0	/* DSP output image horizontal start point */
#define		V_OFFSET			0x0F	/* DSP output image vertical start point */
#define OV2643_HTS		0x29	/* Number of clock periods for horizontal total timing length MSBs */
#define OV2643_HTS2		0x2A	/* Number of clock periods for horizontal total timing length LSBs */
#define OV2643_VTS		0x2B	/* Number of rows for vertical total timing MSBs */
#define	OV2643_VTS2		0x2C	/* Number of rows for vertical total timing LSBs */
#define OV2643_BLC		0x2F	
#define		BLC_EN				0x80	/* 0: BLC is disabled, 1: BLC is enabled */
#define		BLC_ALWAYS			0x40	/* 0: Do BLC at gain change, 1: Do BLC at every frame */
#define		BLC_TRIGGER			0x30	/* 00: 2x, 01: Not allowed, 10: 1.5x, 11: 1.25x */
#define		BLC_R				0x08	/* 0: Black line do not include red line, 1: include */
#define		BLC_B				0x04	/* 0: Black line do not include blue line, 1: include */
#define		LATCH_REV			0x02	/* 0: Normal, 1: Reverse clock edge to latch data from ADC */
#define 	BLC_INIT			0x01	/* 0: Normal, 1: Trigger BLC for one frame, this bit will be reset to 0 after BLC finished */
#define OV2643_BLC2		0x30	/* BLC offset of B[7:0] */
#define OV2643_BLC3		0x31	/* BLC offset of R[7:0] */
#define OV2643_BLC4		0x32	/* BLC offset of Gb[7:0] */
#define OV2643_BLC5		0x33	/* BLC offset of Gr[7:0] */
#define OV2643_BLC6		0x34	
#define 	BLC6_B				0xC0	/* BLC offset of B[9:8] */
#define		BLC6_R				0x30	/* BLC offset of R[9:8] */
#define		BLC6_Gb				0x0C	/* BLC offset of Gb[9:8] */
#define		BLC6_Gr				0x03	/* BLC offset of Gr[9:8] */
#define OV2643_OFFS		0x35	/* offset, Usually same as BLC target(register 0x36[7:0]) */
#define OV2643_TARGET	0x36	/* BLC target */
#define OV2643_TMC0		0x37	/*  */
#define OV2643_TMC1		0x38	/*  */
#define OV2643_TMC2		0x39	/*  */
#define OV2643_TMC6		0x3D	/*  */
#define OV2643_LENCX	0x3E	/*  */
#define OV2643_LENCY	0x3F	/*  */
#define OV2643_REG40	0x40	
#define 	REG40_ISP_ENABLE			0x80	
#define		REG40_RAWGAMMA_ENABLE		0x40
#define		REG40_AWBSTATSISTIC_ENABLE	0x20
#define		REG40_AWGGAIN_ENABLE		0x10
#define		REG40_LENC_ENABLE			0x08
#define		REG40_LCDADJUST_ENABLE		0x04
#define		REG40_BLACKCANCEL_ENABLE	0x02
#define		REG40_WHITECANCEL_ENABLE	0x01
#define OV2643_REG41	0x41
#define		REG42_UVAVG_SEL				0x20	/* 0: Median filter, 1: Average filter */
#define		REG42_LENCGAINADJUST_ENABLE	0x10
#define		REG42_SDE_ENABLE			0x08
#define		REG42_UVAVG_ENABLE			0x04
#define		REG42_CMX_ENABLE			0x02
#define		REG42_CIP_ENABLE			0x01
#define OV2643_REG42	0x42	/*  */
#define OV2643_REG43	0x43	/*  */
#define OV2643_REG44	0x44	/*  */
#define OV2643_INTERNAL_CTRL	0x45	/*  */
#define OV2643_REG46	0x46	/* BLC taraget manual value */
#define OV2643_REG47	0x47	/*  */
#define OV2643_REG4C	0x4C	/*  */
#define OV2643_REG4D	0x4D 	/*  */
#define OV2643_REG4E	0x4E	/*  */
#define OV2643_REG4F	0x4F	/*  */
#define OV2643_REG52	0x52	/*  */
#define OV2643_REG53	0x53	/*  */
#define OV2643_REG54	0x54	/*  */
#define OV2643_REG55	0x55	/*  */
#define OV2643_REG56	0x56	/*  */
#define OV2643_REG59	0x59	/*  */
#define OV2643_REG5A	0x5A	/*  */
#define OV2643_REG5B	0x5B	/*  */
#define OV2643_REG5C	0x5C	/*  */
#define OV2643_REG5D	0x5D	/*  */
#define OV2643_REG60	0x60	/*  */
#define OV2643_REG61	0x61	/*  */
#define OV2643_REG62	0x62	/*  */
#define OV2643_REG63	0x63	/*  */
#define OV2643_REG64	0x64	/*  */
#define OV2643_REG65	0x65	/*  */
#define OV2643_REG66	0x66	/*  */
#define OV2643_REG67	0x67	/*  */
#define OV2643_REG68	0x68	/*  */
#define OV2643_REG69	0x69	/*  */
#define OV2643_REG6A	0x6A	/*  */
#define OV2643_REG6B	0x6B	/*  */
#define OV2643_REG6C	0x6C	/*  */
#define OV2643_REG6D	0x6D	/*  */
#define OV2643_REG6E	0x6E	/*  */
#define OV2643_REG6F	0x6F	/*  */
#define OV2643_REG70	0x70
#define OV2643_REG71	0x71	
#define OV2643_REG72	0x72	
#define OV2643_REG73	0x73	
#define OV2643_REG74	0x74	
#define OV2643_REG75	0x75
#define		REG75_STEP_FAST		0xC0
#define		REG75_STEP_LOCAL	0x30	/*  */
#define		REG75_G_EN			0x08
#define		REG75_AWB_SIMPLE	0x04
#define		REG75_ADVANCED_AWB	0x03	
#define	OV2643_REG76	0x76	
#define	OV2643_REG77	0x77
#define	OV2643_REG78	0x78
#define	OV2643_REG79	0x79
#define OV2643_REG7A	0x7A	
#define OV2643_REG7B	0x7B
#define OV2643_REG89	0x89
#define OV2643_REG8A	0x8A
#define OV2643_REG8B	0x8B
#define OV2643_REG8C	0x8C
#define OV2643_REG8D	0x8D
#define OV2643_REG8E	0x8E
#define OV2643_REG8F	0x8F
#define OV2643_REG9B	0x9B
#define OV2643_REG9C	0x9C
#define OV2643_REG9D	0x9D
#define OV2643_REG9E	0x9E
#define OV2643_REG9F	0x9F
#define OV2643_REGA0	0xA0
#define OV2643_REGA1	0xA1
#define OV2643_REGA2	0xA2
#define OV2643_REGA3	0xA3
#define OV2643_REGA4	0xA4
#define OV2643_REGA5	0xA5
#define OV2643_REGA6	0xA6
#define OV2643_REGA7	0xA7
#define OV2643_REGA8	0xA8
#define OV2643_REGA9	0xA9
#define OV2643_REGAA	0xAA
#define OV2643_REGAB	0xAB
#define OV2643_REGAC	0xAC
#define OV2643_REGAD	0xAD
#define OV2643_REGAE	0xAE
#define OV2643_REGAF	0xAF
#define	OV2643_REGB0	0xB0	
#define	OV2643_REGB1	0xB1
#define	OV2643_REGB2	0xB2
#define	OV2643_REGB3	0xB3
#define	OV2643_REGB4	0xB4
#define	OV2643_REGB5	0xB5	
#define		REGB5_ADJMAN_I		0x10
#define		REGB5_YAVG_MAN		0x08
#define		REGB5_GAMMA_MAN		0x04
#define	OV2643_REGB6	0xB6
#define		REGB6_FIXEDY_EN		0x80
#define		REGB6_NEGATIVE_EN	0x40
#define		REGB6_GRAY_EN		0x20
#define		REGB6_FIXEDU_EN		0x10
#define		REGB6_FIXEDV_EN		0x08
#define		REGB6_YCONTRAST_EN	0x04
#define		REGB6_SATURATE_EN	0x02
#define		REGB6_HUE_EN		0x01
#define	OV2643_HUE_COS	0xB7	/*  */
#define	OV2643_HUE_SIN	0xB8	/*  */
#define	OV2643_REGB9	0xB9
#define	OV2643_REGBB	0xBB	/* Manual Y offset */
#define	OV2643_REGBC	0xBC	/* Y contrast gain (20=1x) */
#define	OV2643_REGBD	0xBD	/* Y Brightness */
#define	OV2643_REGBE	0xBE
#define	OV2643_REGBF	0xBF
#define	OV2643_DVP_CTRL00 0xC1	
#define		CTRL00_DBG_OUT		0x08	/* 0: Normal, 1: Debug mode */
#define		CTRL00_BT_BIT8		0x04	/* 0: Bit test pattern uses 10-bit data, 1: 8bit data */
#define		CTRL00_BT_M1		0x02	/* 0: Bit test pattern shifts one bit in every clock period, 
                                           1: one bit in every two clock periods */
#define		CTRL00_BT_OUT		0x01	/* 0: Output normal image, 1: Output bit test pattern */
#define	OV2643_DVP_CTRL01 0xC2	
#define		CTRL01_DATA_ORDER	0xC0	/* 00: DVP output DVP_DATA[9:0] 
										   01: DVP output DVP_DATA[0:9]
										   10: DVP output DVP_DATA{[2:9],[1:0] 
										   11: DVP output DVP_DATA{[7:0],[9:8]} */
#define	OV2643_IO		0xC3	
#define		IO_HREF_PIN			0x10	/* 0: Input, 1: Output (Output enable of HREF pin) */
#define		IO_VSYNC_PIN		0x08	/* 0: input, 1: Output (Output enable of VSYNC pin) */
#define		IO_PCLK_PIN			0x04	/* 0: Input, 1: Output (Output enable of PCLK pin) */
#define		IO_DATA_PIN			0x03	/* 0: Input, 1: Output (Output enable of DATA[9:8] pin) */
#define OV2643_IO2		0xC4	/* 0: input, 1: Output (Output enable for DATA[7:0] pin) */
#define	OV2643_SHIFT	0xC5	/* Offset of data shift start point */
#define	OV2643_SA1TMC0	0xC6	/* Adjust rstyz start point */
#define	OV2643_SA1TMC7	0xCD	/* Color bar */
#define	OV2643_REGCE	0xCE	/* Indirect register read address */
#define	OV2643_REGCF	0xCF	/* Indirect register read data */
#define	OV2643_ANCOM1	0xD9	/*  */
#define	OV2643_PWCOM0	0xDA	/* bit[7]: bp_regulator */
#define	OV2643_PWCOM2	0xDC	/* bit[3:0]: vsun_c */
#define	OV2643_PWCOM4	0xDE	/* bit[3]: tagc */
#define	OV2643_GRPC		0xDF	/*  */

#endif